# NexusTrade 持續部署 (CD) 工作流程
# 簡化版本，專注於映像建置和基本部署驗證

name: Continuous Deployment

on:
  push:
    branches: [master, main]
    tags: ['v*']
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [master, main]

# 環境變數
env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# 工作權限
permissions:
  contents: read
  packages: write

jobs:
  # ========================
  # 建置和發布 Docker 映像
  # ========================
  build-and-publish:
    name: 建置和發布 Docker 映像
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🏗️ 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 登入 Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📝 提取 metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🔨 建置並推送 Docker 映像
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================
  # 部署驗證
  # ========================
  deployment-validation:
    name: 部署驗證
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🧪 Docker 映像測試
        run: |
          echo "🧪 測試 Docker 映像..."
          # 在這裡可以添加基本的映像測試
          echo "映像標籤: ${{ needs.build-and-publish.outputs.image-tag }}"
          echo "映像摘要: ${{ needs.build-and-publish.outputs.image-digest }}"
          echo "✅ 映像建置驗證完成"
          
      - name: 📊 部署就緒檢查
        run: |
          echo "📊 檢查部署就緒狀態..."
          
          # 檢查必要檔案
          test -f Dockerfile || { echo "❌ Dockerfile 缺失"; exit 1; }
          test -f docker-compose.yml || { echo "❌ docker-compose.yml 缺失"; exit 1; }
          test -f src/server.js || { echo "❌ 主應用程式缺失"; exit 1; }
          
          echo "✅ 所有必要檔案存在"
          echo "🚀 部署就緒檢查通過"

  # ========================
  # 發布報告
  # ========================
  release-report:
    name: 發布報告
    runs-on: ubuntu-latest
    needs: [build-and-publish, deployment-validation]
    if: always()
    
    steps:
      - name: 📊 生成發布報告
        run: |
          echo "# 🚀 NexusTrade 發布報告"
          echo ""
          echo "**發布時間:** $(date)"
          echo "**版本:** ${{ github.ref_name }}"
          echo "**提交:** ${{ github.sha }}"
          echo ""
          echo "## 發布狀態"
          echo "- 映像建置: ${{ needs.build-and-publish.result }}"
          echo "- 部署驗證: ${{ needs.deployment-validation.result }}"
          echo ""
          
          if [[ "${{ needs.build-and-publish.result }}" == "success" ]]; then
            echo "✅ Docker 映像已成功建置並推送到 registry"
            echo "📦 映像位置: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          else
            echo "❌ 映像建置失敗"
          fi
          
          echo ""
          echo "## 使用方式"
          echo "```bash"
          echo "# 拉取最新映像"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "# 使用 docker-compose 部署"
          echo "docker-compose up -d"
          echo "```"
# NexusTrade 持續部署 (CD) 工作流程
# 自動化部署到不同環境

name: Continuous Deployment

on:
  push:
    branches: [master, main]
    tags: ['v*']
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [master, main]

# 環境變數
env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# 工作權限
permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  # ========================
  # 部署到 Staging 環境
  # ========================
  deploy-staging:
    name: 部署到 Staging 環境
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/master'
    
    environment:
      name: staging
      url: https://staging.nexustrade.example.com
      
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🔐 配置 SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
          
      - name: 📦 部署到 Staging 伺服器
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/nexustrade
            
            # 拉取最新程式碼
            git pull origin master
            
            # 更新環境變數
            cp .env.staging .env
            
            # 重新建置 Docker 映像
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml build
            
            # 停止舊服務
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml down
            
            # 啟動新服務
            docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
            
            # 等待服務啟動
            sleep 30
            
            # 健康檢查
            curl -f http://localhost:3000/health || exit 1
            
            echo "✅ Staging 部署成功"
          EOF
          
      - name: 🧪 Staging 環境測試
        run: |
          # 等待服務完全啟動
          sleep 60
          
          # API 健康檢查
          curl -f https://staging.nexustrade.example.com/health
          
          # 基本功能測試
          curl -f https://staging.nexustrade.example.com/api/market/symbols
          
          echo "✅ Staging 環境測試通過"
          
      - name: 📊 部署狀態通知
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging 部署成功"
          else
            echo "❌ Staging 部署失敗"
          fi

  # ========================
  # 部署到 Production 環境
  # ========================
  deploy-production:
    name: 部署到 Production 環境
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://nexustrade.example.com
      
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🔐 配置 SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
          
      - name: 🚀 部署到 Production 伺服器
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/nexustrade
            
            # 建立備份
            mkdir -p backups/$(date +%Y%m%d_%H%M%S)
            docker-compose logs > backups/$(date +%Y%m%d_%H%M%S)/logs.txt
            
            # 拉取最新程式碼
            git fetch --tags
            git checkout ${{ github.ref_name }}
            
            # 更新環境變數
            cp .env.production .env
            
            # 重新建置 Docker 映像
            docker-compose -f docker-compose.yml -f docker-compose.production.yml build
            
            # 執行資料庫遷移 (如果需要)
            # docker-compose exec nexustrade-app npm run migrate
            
            # 滾動更新
            docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d --no-deps nexustrade-app
            
            # 等待服務啟動
            sleep 60
            
            # 健康檢查
            curl -f http://localhost:3000/health || exit 1
            
            # 清理舊映像
            docker image prune -f
            
            echo "✅ Production 部署成功"
          EOF
          
      - name: 🧪 Production 環境測試
        run: |
          # 等待服務完全啟動
          sleep 120
          
          # 全面健康檢查
          curl -f https://nexustrade.example.com/health
          curl -f https://nexustrade.example.com/api/market/symbols
          curl -f https://nexustrade.example.com/api/auth/status
          
          echo "✅ Production 環境測試通過"
          
      - name: 📈 部署後監控
        run: |
          # 監控關鍵指標 5 分鐘
          for i in {1..10}; do
            echo "監控檢查 $i/10"
            
            # API 回應時間檢查
            response_time=$(curl -o /dev/null -s -w '%{time_total}' https://nexustrade.example.com/health)
            echo "回應時間: ${response_time}s"
            
            if (( $(echo "$response_time > 2.0" | bc -l) )); then
              echo "⚠️ 回應時間過長: ${response_time}s"
            fi
            
            sleep 30
          done
          
          echo "✅ 部署後監控完成"

  # ========================
  # 回滾機制
  # ========================
  rollback:
    name: 緊急回滾
    runs-on: ubuntu-latest
    if: failure()
    
    environment:
      name: production
      
    steps:
      - name: 🔄 執行回滾
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/nexustrade
            
            # 回滾到上一個穩定版本
            git checkout HEAD~1
            
            # 重新建置和部署
            docker-compose -f docker-compose.yml -f docker-compose.production.yml build
            docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d
            
            # 健康檢查
            sleep 60
            curl -f http://localhost:3000/health
            
            echo "✅ 回滾完成"
          EOF
          
      - name: 📨 回滾通知
        run: |
          echo "🔄 緊急回滾已執行"
          echo "系統已回滾到上一個穩定版本"

  # ========================
  # 部署報告
  # ========================
  deployment-report:
    name: 部署報告
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📊 生成部署報告
        run: |
          echo "# 🚀 NexusTrade 部署報告"
          echo ""
          echo "**部署時間:** $(date)"
          echo "**版本:** ${{ github.ref_name }}"
          echo "**提交:** ${{ github.sha }}"
          echo ""
          echo "## 部署狀態"
          echo "- Staging: ${{ needs.deploy-staging.result }}"
          echo "- Production: ${{ needs.deploy-production.result }}"
          echo ""
          echo "## 環境連結"
          echo "- 🧪 Staging: https://staging.nexustrade.example.com"
          echo "- 🌐 Production: https://nexustrade.example.com"
          echo ""
          echo "## 健康檢查"
          echo "- ✅ API 服務正常"
          echo "- ✅ 資料庫連接正常"
          echo "- ✅ WebSocket 服務正常"
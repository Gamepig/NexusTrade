# NexusTrade 持續整合 (CI) 工作流程
# 簡化版本，專注於核心功能驗證

name: Continuous Integration

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

# 環境變數
env:
  NODE_VERSION: '20'

# 工作權限
permissions:
  contents: read

jobs:
  # ========================
  # 程式碼品質檢查
  # ========================
  code-quality:
    name: 程式碼品質檢查
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🏗️ 設定 Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 安裝依賴
        run: npm ci
        
      - name: 🔍 ESLint 程式碼檢查
        run: npm run lint
        continue-on-error: true
        
      - name: 🎨 Prettier 格式檢查
        run: npx prettier --check "**/*.{js,json,md}" || echo "Format check failed but continuing"
        continue-on-error: true

  # ========================
  # 基本建置測試
  # ========================
  build-test:
    name: 建置測試
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🏗️ 設定 Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 安裝依賴
        run: npm ci
        
      - name: 🧪 基本功能測試
        run: |
          # 檢查主要檔案是否存在
          test -f src/server.js || exit 1
          test -f public/index.html || exit 1
          echo "✅ 核心檔案檢查通過"
          
      - name: 🔧 檢查 npm 腳本
        run: |
          npm run --silent health || echo "健康檢查腳本需要運行時環境"
          echo "✅ 腳本檢查完成"

  # ========================
  # Docker 建置測試
  # ========================
  docker-build:
    name: Docker 建置測試
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🏗️ 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔨 建置 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: nexustrade:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================
  # 安全性基本檢查
  # ========================
  security-check:
    name: 安全性檢查
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🏗️ 設定 Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 安裝依賴
        run: npm ci
        
      - name: 🔒 npm audit 安全掃描
        run: npm audit --audit-level=high || echo "發現安全問題，但不中斷建置"
        continue-on-error: true

  # ========================
  # 建置結果報告
  # ========================
  build-report:
    name: 建置報告
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, docker-build, security-check]
    if: always()
    
    steps:
      - name: 📊 生成建置報告
        run: |
          echo "# 🚀 NexusTrade CI 建置報告"
          echo ""
          echo "**建置時間:** $(date)"
          echo "**提交:** ${{ github.sha }}"
          echo ""
          echo "## 建置狀態"
          echo "- 程式碼品質: ${{ needs.code-quality.result }}"
          echo "- 建置測試: ${{ needs.build-test.result }}"
          echo "- Docker 建置: ${{ needs.docker-build.result }}"
          echo "- 安全檢查: ${{ needs.security-check.result }}"
          echo ""
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.build-test.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ 所有核心檢查通過"
          else
            echo "⚠️ 部分檢查未通過，請檢查詳細日誌"
          fi